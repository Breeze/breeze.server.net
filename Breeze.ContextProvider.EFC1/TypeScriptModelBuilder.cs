using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Dynamic;
using Newtonsoft.Json.Linq;

namespace Breeze.ContextProvider.EFC1
{
    public static partial class EFContextProviderUtils
    {
        /// <summary>
        /// Generate a Typescript definition file for the Entity Framework Core DbContext
        /// </summary>
        /// <param name="dbContext">The EF Core DbContext</param>
        /// <param name="ModuleName">The module name of the typed entities</param>
        /// <param name="InterfaceName">The interface name of the typed entities</param>
        /// <param name="camelCase">camelCase the entity types and properties</param>
        /// <param name="useKnockoutStyle">entity properties declared as knockout types (default)</param>
        /// <returns>TypesScript Defs</returns>
        public static String GetTypeScriptModelContext(DbContext dbContext, String ModuleName, String InterfaceName, bool camelCase = false, bool useKnockoutStyle = true)
        {
            #region Init
            var result = 
@"//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

";

            Func<string, string> className = fullClassName =>
            {
                return  fullClassName.Split('.').Last();
            };
            Func<string, string> camelName = origPropName =>
            {
                return camelCase ? origPropName.Substring(0,1).ToLower() + origPropName.Substring(1) : origPropName;
            };

            result += $@"module {ModuleName} " + "{" + Environment.NewLine;
            result += $@"  export interface {InterfaceName} extends breeze.Entity " + "{" + Environment.NewLine;
            result += @"  }" + Environment.NewLine + Environment.NewLine;
            #endregion

            var entTypes = dbContext.Model.GetEntityTypes().OrderBy(et => et.Name).ToList();

            #region structuralTypes
            entTypes.ForEach(entType =>
            {
                var shortName = className(entType.Name);
                result += $@"  export interface {camelName(shortName)} extends {InterfaceName} " + "{" + Environment.NewLine;

                entType.GetProperties().OrderBy(p => p.Name).ToList().ForEach(entProp =>
                {
                    var propType = entProp.ClrType.IsGenericType && entProp.ClrType.GetGenericTypeDefinition() == typeof(Nullable<>) ? entProp.ClrType.GenericTypeArguments[0] : entProp.ClrType;
                    var tsPropType = GetJStype(propType.Name);
                    // enum
                    if (propType.BaseType.Name == "Enum")
                    {
                        //dataProp.enumType = "Edm." + propType.FullName;
                    }

                    result += $@"    {camelName(entProp.Name)}: " + (useKnockoutStyle ? "KnockoutObservable<" : "") + tsPropType + (useKnockoutStyle ? ">" : "") + ";" + Environment.NewLine;
                });

                result += Environment.NewLine;

                var navs = entType.GetNavigations().OrderBy(n => n.Name).ToList();
                navs.ForEach(navProp =>
                {
                    var isScalar = !navProp.IsCollection();
                    var tsTypeName = className(navProp.GetTargetType().Name);
                    result += $@"    {camelName(navProp.Name)}: " + (useKnockoutStyle ? "KnockoutObservable" : "") + (isScalar ? "" : "Array") + "<" + tsTypeName + ">;" + Environment.NewLine;

                });
                result += "  }" + Environment.NewLine + Environment.NewLine;
            });
            #endregion
            result += "}";

            return result;
        }

        /// <summary>
        /// Generate a Typescript definition file from breeze MetaData
        /// </summary>
        /// <param name="metaDataJSON">The Breeze metadata JSON</param>
        /// <param name="ModuleName">The module name of the typed entities</param>
        /// <param name="InterfaceName">The interface name of the typed entities</param>
        /// <param name="camelCase">camelCase the entity types and properties</param>
        /// <param name="useKnockoutStyle">entity properties declared as knockout types (default)</param>
        /// <returns>TypeScript Defs</returns>
        public static String GetTypeScriptModelContext(String metaDataJSON, String ModuleName, String InterfaceName, bool camelCase = false, bool useKnockoutStyle = true)
        {
            #region Init
            var result = 
@"//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

";

            //Func<string, string> className = fullClassName =>
            //{
            //    return fullClassName.Split('.').Last();
            //};
            Func<string, string> camelName = origPropName =>
            {
                return camelCase ? origPropName.Substring(0, 1).ToLower() + origPropName.Substring(1) : origPropName;
            };

            var metaExpando = JsonConvert.DeserializeObject<ExpandoObject>(metaDataJSON, new ExpandoObjectConverter());
            var metaDict = metaExpando as IDictionary<string, Object>;

            result += $@"module {ModuleName} " + "{" + Environment.NewLine;
            result += $@"  export interface {InterfaceName} extends breeze.Entity " + "{" + Environment.NewLine;
            result += @"  }" + Environment.NewLine + Environment.NewLine;
            #endregion

            var entTypes = (metaDict["structuralTypes"] as List<object>).Select(x => x as ExpandoObject).OrderBy(x => (x as IDictionary<string, Object>)["defaultResourceName"].ToString());

            #region structuralTypes
            foreach (IDictionary<string, Object> entType in entTypes)
            {
                var shortName = camelName(entType["defaultResourceName"].ToString());
                result += $@"  export interface {camelName(shortName)} extends {InterfaceName} " + "{" + Environment.NewLine;

                var properties = (entType["dataProperties"] as List<object>).Select(x => x as ExpandoObject).OrderBy(x => (x as IDictionary<string, Object>)["name"].ToString());
                foreach (IDictionary<string, Object> entProp in properties)
                {
                    var propName = entProp["name"].ToString();
                    var tsPropType = entProp["dataType"].ToString();
                    tsPropType = GetJStype(tsPropType);
                    result += $@"    {camelName(propName)}: " + (useKnockoutStyle ? "KnockoutObservable<" : "") + tsPropType + (useKnockoutStyle ? ">" : "") + ";" + Environment.NewLine;
                };

                result += Environment.NewLine;

                var navs = (entType["navigationProperties"] as List<object>).Select(x => x as ExpandoObject).OrderBy(x => (x as IDictionary<string, Object>)["name"].ToString());
                foreach (IDictionary<string, Object> navProp in navs)
                {
                    var navName = navProp["name"].ToString();
                    var isScalar = navProp["isScalar"].ToString().ToLower() == "true";
                    var tsTypeName = navProp["entityTypeName"].ToString();
                    if (tsTypeName.Contains(":"))
                        tsTypeName = tsTypeName.Substring(0, tsTypeName.IndexOf(':'));
                    result += $@"    {camelName(navName)}: " + (useKnockoutStyle ? "KnockoutObservable" : "") + (isScalar ? "" : "Array") + "<" + tsTypeName + ">;" + Environment.NewLine;
                }

                result += "  }" + Environment.NewLine + Environment.NewLine;
            };
            #endregion
            result += "}";

            return result;
        }

        private static String GetJStype(String typeName)
        {
            var tsPropType = "any";
            var propTypeName = typeName;
            switch (propTypeName)
            {
                case "String":
                    tsPropType = "string";
                    break;
                case "Int64":
                case "Int32":
                case "Int16":
                case "Decimal":
                case "Double":
                case "Single":
                    tsPropType = "number";
                    break;
                case "Guid":
                    tsPropType = "any";
                    break;
                case "Byte":
                    tsPropType = "any";
                    break;
                case "Boolean":
                    tsPropType = "boolean";
                    break;
                case "DateTime":
                case "DateTimeOffset":
                    tsPropType = "Date";
                    break;
                case "Binary":
                    tsPropType = "any";
                    break;
                case "Time":
                    tsPropType = "Date";
                    break;
                case "Byte[]":
                    tsPropType = "any";
                    break;
                case "Enum":
                    tsPropType = "Enums.???";
                    break;
                default:
                    break;
            }

            return tsPropType;
        }
    }
}