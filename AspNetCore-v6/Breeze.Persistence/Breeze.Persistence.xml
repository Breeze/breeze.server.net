<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Breeze.Persistence</name>
    </assembly>
    <members>
        <member name="M:Breeze.Persistence.BreezeConfig.CreateJsonSerializerSettings">
            <summary>
            Override to use a specialized JsonSerializer implementation.
            </summary>
        </member>
        <member name="M:Breeze.Persistence.BreezeConfig.CreateJsonSerializerSettingsForSave">
            <summary>
            Override to use a specialized JsonSerializer implementation for saving.
            Base implementation uses CreateJsonSerializerSettings() then sets TypeNameHandling to None
            </summary>
        </member>
        <member name="M:Breeze.Persistence.BreezeConfig.GetTransactionSettings">
            <summary>
            Returns TransactionSettings.Default.  Override to return different settings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Breeze.Persistence.BreezeEntityValidator">
            <summary>
            Validates entities using Breeze metadata.  This duplicates the validation performed on the Breeze client.
            </summary>
        </member>
        <member name="M:Breeze.Persistence.BreezeEntityValidator.#ctor(Breeze.Persistence.PersistenceManager,System.Collections.Generic.List{Breeze.Persistence.MetaType})">
            <summary>
            Create a new instance.  
            </summary>
            <param name="persistenceManager">Used for getting entity keys for building EntityError objects.</param>
            <param name="structuralTypeList">Contains the validator information for properties of entity and complex types.</param>
        </member>
        <member name="M:Breeze.Persistence.BreezeEntityValidator.#ctor(Breeze.Persistence.PersistenceManager,Breeze.Persistence.BreezeMetadata)">
            <summary>
            Create a new instance.  
            </summary>
            <param name="persistenceManager">Used for getting entity keys for building EntityError objects.</param>
            <param name="breezeMetadata">Contains breeze metadata. The structuralTypeList is extracted from it.</param>
        </member>
        <member name="M:Breeze.Persistence.BreezeEntityValidator.ValidateEntities(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{Breeze.Persistence.EntityInfo}},System.Boolean)">
            <summary>
            Validate all the entities in the saveMap.
            </summary>
            <param name="saveMap">Map of type to entities.</param>
            <param name="throwIfInvalid">If true, throws an EntityErrorsException if any entity is invalid</param>
            <exception cref="T:Breeze.Persistence.EntityErrorsException">Contains all the EntityErrors.  Only thrown if throwIfInvalid is true.</exception>
            <returns>List containing an EntityError for each failed validation.</returns>
        </member>
        <member name="M:Breeze.Persistence.BreezeEntityValidator.ValidateEntity(Breeze.Persistence.EntityInfo,System.Collections.Generic.List{Breeze.Persistence.EntityError})">
            <summary>
            Validates a single entity.
            Skips validation (returns true) if entity is marked Deleted.
            </summary>
            <param name="entityInfo">contains the entity to validate</param>
            <param name="entityErrors">An EntityError is added to this list for each error found in the entity</param>
            <returns>true if entity is valid, false if invalid.</returns>
        </member>
        <member name="M:Breeze.Persistence.DataAnnotationsValidator.#ctor(Breeze.Persistence.PersistenceManager)">
            <summary>
            Create a new instance.  
            </summary>
            <param name="persistenceManager">Used for getting entity keys for building EntityError objects.</param>
        </member>
        <member name="M:Breeze.Persistence.DataAnnotationsValidator.ValidateEntities(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{Breeze.Persistence.EntityInfo}},System.Boolean)">
            <summary>
            Validate all the entities in the saveMap.
            </summary>
            <param name="saveMap">Map of type to entities.</param>
            <param name="throwIfInvalid">If true, throws an EntityErrorsException if any entity is invalid</param>
            <exception cref="T:Breeze.Persistence.EntityErrorsException">Contains all the EntityErrors.  Only thrown if throwIfInvalid is true.</exception>
            <returns>List containing an EntityError for each failed validation.</returns>
        </member>
        <member name="M:Breeze.Persistence.DataAnnotationsValidator.ValidateEntity(Breeze.Persistence.EntityInfo,System.Collections.Generic.List{Breeze.Persistence.EntityError})">
            <summary>
            Validates a single entity.
            Skips validation (returns true) if entity is marked Deleted.
            </summary>
            <param name="entityInfo">contains the entity to validate</param>
            <param name="entityErrors">An EntityError is added to this list for each error found in the entity</param>
            <returns>true if entity is valid, false if invalid.</returns>
        </member>
        <member name="T:Breeze.Persistence.BreezeMetadata">
            <summary> Metadata structure sent to the client </summary>
        </member>
        <member name="P:Breeze.Persistence.BreezeMetadata.MetadataVersion">
            <summary> Version of the metadata schema </summary>
        </member>
        <member name="P:Breeze.Persistence.BreezeMetadata.NamingConvention">
            <summary> Strategy for converting names between client and server </summary>
        </member>
        <member name="P:Breeze.Persistence.BreezeMetadata.StructuralTypes">
            <summary> Entity types and Complex types </summary>
        </member>
        <member name="P:Breeze.Persistence.BreezeMetadata.EnumTypes">
            <summary> Enum types used by entities and complex types </summary>
        </member>
        <member name="T:Breeze.Persistence.MetaEnum">
            <summary> Represents a C# enum type, which can be a value for a DataProperty </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaEnum.ShortName">
            <summary> Name of the enum </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaEnum.Namespace">
            <summary> Namespace of the enum </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaEnum.Values">
            <summary> String values of the enum </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaEnum.Ordinals">
            <summary> Int values of the enum </summary>
        </member>
        <member name="T:Breeze.Persistence.MetaType">
            <summary> EntityType or ComplexType </summary>
        </member>
        <member name="M:Breeze.Persistence.MetaType.#ctor">
            <summary> Initialize lists </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaType.ShortName">
            <summary> Name of the type </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaType.Namespace">
            <summary> Namespace of the type </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaType.BaseTypeName">
            <summary> Base class, in the form TypeName:#Namespace </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaType.AutoGeneratedKeyType">
            <summary> Type of server-generated key for this entity, if any </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaType.DefaultResourceName">
            <summary> Name of resource or endpoint on the server for retrieving instances of this entity </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaType.IsAbstract">
            <summary> Whether this type is an abstract base class </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaType.IsComplexType">
            <summary> Whether this type is a ComplexType (vs. an Entity) </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaType.DataProperties">
            <summary> Data properties of this type </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaType.NavigationProperties">
            <summary> Navigation properties of this type </summary>
        </member>
        <member name="T:Breeze.Persistence.MetaProperty">
            <summary> Base class for Data and Navigation properties </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaProperty.Custom">
            <summary> Arbitrary user-defined object to be set on property metadata </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaProperty.NameOnServer">
            <summary> Server version of the property name </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaProperty.Validators">
            <summary> Predefined validators applied to this property </summary>
        </member>
        <member name="T:Breeze.Persistence.MetaDataProperty">
            <summary> Data Property </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaDataProperty.DataType">
            <summary> Type of the property: String, Int32, etc. </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaDataProperty.EnumType">
            <summary> If an enum, the Name:#NameSpace of the enum type </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaDataProperty.IsPartOfKey">
            <summary> Whether property is a part of the entity key </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaDataProperty.IsNullable">
            <summary> Whether property is nullable </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaDataProperty.MaxLength">
            <summary> If a string, max length allowed </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaDataProperty.DefaultValue">
            <summary> Default value, if defined </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaDataProperty.ConcurrencyMode">
            <summary> "Fixed" if this property is used as a concurrency token </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaDataProperty.ComplexTypeName">
            <summary> If a complex object, the Name:#NameSpace of the complex type </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaDataProperty.RawTypeName">
            <summary> Used with 'Undefined' DataType </summary>
        </member>
        <member name="F:Breeze.Persistence.MetaDataProperty.IsIdentityColumn">
            <summary> Whether property is an auto-generated key </summary>
        </member>
        <member name="M:Breeze.Persistence.MetaDataProperty.AddValidators(System.Type)">
            <summary> Add validator names to the property; these match validators on the client </summary>
        </member>
        <member name="T:Breeze.Persistence.MetaNavProperty">
            <summary> Navigation Property </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaNavProperty.EntityTypeName">
            <summary> Name of related entity </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaNavProperty.IsScalar">
            <summary> Whether this property returns a single entity (vs. an array of entities) </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaNavProperty.AssociationName">
            <summary> Unique name of association between entities </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaNavProperty.ForeignKeyNamesOnServer">
            <summary> Names of the foreign key DataProperties associated with this NavigationProperty on this entity </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaNavProperty.InvForeignKeyNamesOnServer">
            <summary> Names of the foreign key DataProperties associated with this NavigationProperty on the related entities </summary>
        </member>
        <member name="T:Breeze.Persistence.MetaValidator">
            <summary> Validators for data types </summary>
        </member>
        <member name="M:Breeze.Persistence.MetaValidator.#ctor(System.String)">
            <summary> Set the name </summary>
        </member>
        <member name="F:Breeze.Persistence.MetaValidator.Required">
            <summary> Validator for not-null properties </summary>
        </member>
        <member name="M:Breeze.Persistence.MetaValidator.FindValidator(System.Type)">
            <summary> Find the validator for the given type </summary>
        </member>
        <member name="P:Breeze.Persistence.MetaValidator.Name">
            <summary> Name of the validator </summary>
        </member>
        <member name="T:Breeze.Persistence.MaxLengthMetaValidator">
            <summary> Validator for the maximum length of a string </summary>
        </member>
        <member name="P:Breeze.Persistence.MaxLengthMetaValidator.MaxLength">
            <summary> Maximum length of string </summary>
        </member>
        <member name="M:Breeze.Persistence.MaxLengthMetaValidator.#ctor(System.Int32)">
            <summary> Set the maxlength </summary>
        </member>
        <member name="T:Breeze.Persistence.PersistenceManager">
            <summary> Manages persistence for Breeze entity models. </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.KeyGenerator">
            <summary> Generates primary key values for new entities </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.ExtractSaveOptions(System.Object)">
            <summary> Get the SaveOptions from the JSON save bundle </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.SaveOptions">
            <summary> Options for the current save operation </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.Metadata">
            <summary> Get the JSON metadata for the entity model </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.XDocToJson(System.Xml.Linq.XDocument)">
            <summary> Converts XML to JSON (for converting EF metadata documents) </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.InitializeSaveState(Newtonsoft.Json.Linq.JObject)">
            <summary> Prepare the SaveWorkState from the JSON payload </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.SaveChanges(Newtonsoft.Json.Linq.JObject,Breeze.Persistence.TransactionSettings)">
            <summary> Extract the entities from the saveBundle, save them, and return the SaveResult </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.SaveChangesAsync(Newtonsoft.Json.Linq.JObject,Breeze.Persistence.TransactionSettings,System.Threading.CancellationToken)">
            <summary> Extract the entities from the saveBundle, save them, and return the SaveResult </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.HandleSaveException(System.Exception,Breeze.Persistence.SaveWorkState)">
            <summary> Allows subclasses to plug in own save exception handling.
            Either throw an exception here, return false, or return true and modify the saveWorkState. </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.GetDbConnection">
            <summary>
            Should only be called from BeforeSaveEntities and AfterSaveEntities.
            </summary>
            <returns>Open DbConnection used by the PersistenceManager's implementation</returns>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.OpenDbConnection">
            <summary>
            Internal use only.  Should only be called by PersistenceManager during SaveChanges.
            Opens the DbConnection used by the PersistenceManager's implementation.
            Method must be idempotent; after it is called the first time, subsequent calls have no effect.
            </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.OpenDbConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Internal use only.  Should only be called by PersistenceManager during SaveChangesAsync.
            Opens the DbConnection used by the PersistenceManager's implementation.
            Method must be idempotent; after it is called the first time, subsequent calls have no effect.
            </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.CloseDbConnection">
            <summary>
            Internal use only.  Should only be called by PersistenceManager during SaveChanges.
            Closes the DbConnection used by the PersistenceManager's implementation.
            </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.CloseDbConnectionAsync">
            <summary>
            Internal use only.  Should only be called by PersistenceManager during SaveChangesAsync.
            Closes the DbConnection used by the PersistenceManager's implementation.
            </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary> Begin a transaction before saving entities </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary> Begin a transaction before saving entities </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.BuildJsonMetadata">
            <summary> Build the metadata from the entity model </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.SaveChangesCore(Breeze.Persistence.SaveWorkState)">
            <summary> Save the changes to the database </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.SaveChangesCoreAsync(Breeze.Persistence.SaveWorkState,System.Threading.CancellationToken)">
            <summary> Save the changes to the database </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.GetKeyValues(Breeze.Persistence.EntityInfo)">
            <summary> Get the primary key values from the entity </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.CreateEntityInfo">
            <summary> Create an EntityInfo instance (override to return a subclass) </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.CreateEntityInfo(System.Object,Breeze.Persistence.EntityState)">
            <summary> Create an EntityInfo instance </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.BeforeSaveEntityDelegate">
            <summary> If assigned, this function is called before each entity is saved.  If the function returns false, the entity will not be saved. </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.BeforeSaveEntityAsyncDelegate">
            <summary> If assigned, this function is called before each entity is saved using SaveChangesAsync.  If the function returns false, the entity will not be saved. </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.BeforeSaveEntitiesDelegate">
            <summary> If assigned, this function is called before entities are saved.  Entities in the dictionary can be added, removed, or changed before saving. </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.BeforeSaveEntitiesAsyncDelegate">
            <summary> If assigned, this function is called before entities are saved using SaveChangesAsync.  Entities in the dictionary can be added, removed, or changed before saving. </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.AfterSaveEntitiesDelegate">
            <summary> If assigned, this function is called after all entities are saved. </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.AfterSaveEntitiesAsyncDelegate">
            <summary> If assigned, this function is called after all entities are saved using SaveChangesAsync. </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.BeforeSaveEntity(Breeze.Persistence.EntityInfo)">
            <summary>
            The method is called for each entity to be saved before the save occurs.  If this method returns 'false'
            then the entity will be excluded from the save.  The base implementation returns the result of BeforeSaveEntityDelegate,
            or 'true' if BeforeSaveEntityDelegate is null.
            </summary>
            <param name="entityInfo"></param>
            <returns>true to include the entity in the save, false to exclude</returns>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.BeforeSaveEntityAsync(Breeze.Persistence.EntityInfo,System.Threading.CancellationToken)">
            <summary>
            The method is called for each entity to be saved before the save occurs using SaveChangeAsync.  If this method returns 'false'
            then the entity will be excluded from the save.  The base implementation returns the result of BeforeSaveEntityAsyncDelegate,
            or 'true' if BeforeSaveEntityAsyncDelegate is null.
            </summary>
            <returns>true to include the entity in the save, false to exclude</returns>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.BeforeSaveEntities(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{Breeze.Persistence.EntityInfo}})">
            <summary>
            Called after BeforeSaveEntity, and before saving the entities to the persistence layer.
            Allows adding, changing, and removing entities prior to save.
            The base implementation returns the result of BeforeSaveEntitiesDelegate, or the unchanged
            saveMap if BeforeSaveEntitiesDelegate is null.
            </summary>
            <param name="saveMap">A List of EntityInfo for each Type</param>
            <returns>The EntityInfo for each entity that should be saved</returns>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.BeforeSaveEntitiesAsync(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{Breeze.Persistence.EntityInfo}},System.Threading.CancellationToken)">
            <summary>
            Called after BeforeSaveEntity, and before saving the entities to the persistence layer using SaveChangesAsync.
            Allows adding, changing, and removing entities prior to save.
            The base implementation returns the result of BeforeSaveEntitiesAsyncDelegate, or the unchanged
            saveMap if BeforeSaveEntitiesAsyncDelegate is null.
            </summary>
            <param name="saveMap">A List of EntityInfo for each Type</param>
            <param name="cancellationToken"></param>
            <returns>The EntityInfo for each entity that should be saved</returns>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.AfterSaveEntities(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{Breeze.Persistence.EntityInfo}},System.Collections.Generic.List{Breeze.Persistence.KeyMapping})">
            <summary>
            Called after the entities have been saved, and all the temporary keys have been replaced by real keys.
            The base implementation calls AfterSaveEntitiesDelegate, or does nothing if AfterSaveEntitiesDelegate is null.
            </summary>
            <param name="saveMap">The same saveMap that was returned from BeforeSaveEntities</param>
            <param name="keyMappings">The mapping of temporary keys to real keys</param>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.AfterSaveEntitiesAsync(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{Breeze.Persistence.EntityInfo}},System.Collections.Generic.List{Breeze.Persistence.KeyMapping},System.Threading.CancellationToken)">
            <summary>
            Called after the entities have been saved using SaveChangesAsync, and all the temporary keys have been replaced by real keys.
            The base implementation calls AfterSaveEntitiesAsyncDelegate, or does nothing if AfterSaveEntitiesAsyncDelegate is null.
            </summary>
            <param name="saveMap">The same saveMap that was returned from BeforeSaveEntities</param>
            <param name="keyMappings">The mapping of temporary keys to real keys</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.CreateEntityInfoFromJson(System.Object,System.Type)">
            <summary> Build an EntityInfo from the JObject </summary>
        </member>
        <member name="M:Breeze.Persistence.PersistenceManager.LookupEntityType(System.String)">
            <summary> Find the Type from the entityTypeName </summary>
        </member>
        <member name="F:Breeze.Persistence.PersistenceManager.KeyGeneratorType">
            <summary> Get an IKeyGenerator implementation from loaded assemblies </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.SaveWorkState">
            <summary> The SaveWorkState representing the save in progress </summary>
        </member>
        <member name="P:Breeze.Persistence.PersistenceManager.JsonSerializer">
            <summary> The configured serializer for reading the save payload </summary>
        </member>
        <member name="T:Breeze.Persistence.SaveWorkState">
            <summary> Data structure and methods for processing entities during save </summary>
        </member>
        <member name="M:Breeze.Persistence.SaveWorkState.#ctor(Breeze.Persistence.PersistenceManager,Newtonsoft.Json.Linq.JArray)">
            <summary> Construct instance from given entitiesArray </summary>
        </member>
        <member name="M:Breeze.Persistence.SaveWorkState.BeforeSave">
            <summary> Call BeforeSaveEntity() on each entity; add those returning 'true' to the SaveMap; then call BeforeSaveEntities() </summary>
        </member>
        <member name="M:Breeze.Persistence.SaveWorkState.BeforeSaveAsync(System.Threading.CancellationToken)">
            <summary> Call BeforeSaveEntity() and BeforeSaveEntityAsync() on each entity; add those returning 'true' to the SaveMap;
            then call BeforeSaveEntities() and BeforeSaveEntitiesAsync() </summary>
        </member>
        <member name="M:Breeze.Persistence.SaveWorkState.AfterSave">
            <summary> Call PersistenceManager.AfterSaveEntities </summary>
        </member>
        <member name="M:Breeze.Persistence.SaveWorkState.AfterSaveAsync(System.Threading.CancellationToken)">
            <summary> Call PersistenceManager.AfterSaveEntities and AfterSaveEntitiesAsync </summary>
        </member>
        <member name="M:Breeze.Persistence.SaveWorkState.ToSaveResult">
            <summary> Convert for sending to client </summary>
        </member>
        <member name="T:Breeze.Persistence.SaveOptions">
            <summary> Options passed from client </summary>
        </member>
        <member name="P:Breeze.Persistence.SaveOptions.AllowConcurrentSaves">
            <summary> Not used on server </summary>
        </member>
        <member name="P:Breeze.Persistence.SaveOptions.Tag">
            <summary> Arbitrary object sent from client; may be used to influence save behavior </summary>
        </member>
        <member name="T:Breeze.Persistence.IKeyGenerator">
            <summary> Server-side key generator </summary>
        </member>
        <member name="M:Breeze.Persistence.IKeyGenerator.UpdateKeys(System.Collections.Generic.List{Breeze.Persistence.TempKeyInfo})">
            <summary> Update the keys for the given entities </summary>
        </member>
        <member name="T:Breeze.Persistence.TempKeyInfo">
            <summary> Instances of this are sent to KeyGenerator  </summary>
        </member>
        <member name="M:Breeze.Persistence.TempKeyInfo.#ctor(Breeze.Persistence.EntityInfo)">
            <summary> Create for an entity </summary>
        </member>
        <member name="P:Breeze.Persistence.TempKeyInfo.Entity">
            <summary> Entity (read-only) </summary>
        </member>
        <member name="P:Breeze.Persistence.TempKeyInfo.TempValue">
            <summary> Temp value of key from client (read-only)  </summary>
        </member>
        <member name="P:Breeze.Persistence.TempKeyInfo.RealValue">
            <summary> New value of key, provided by KeyGenerator </summary>
        </member>
        <member name="P:Breeze.Persistence.TempKeyInfo.Property">
            <summary> Property on the entity that holds the key </summary>
        </member>
        <member name="T:Breeze.Persistence.EntityState">
            <summary> The state of the entity </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityState.Detached">
            <summary> Not attached to a PersistenceManager </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityState.Unchanged">
            <summary> Not changed since retrieval from database </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityState.Added">
            <summary> New entity not yet in database </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityState.Deleted">
            <summary> Existing entity to be deleted from database </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityState.Modified">
            <summary> Existing entity to be modified in database </summary>
        </member>
        <member name="T:Breeze.Persistence.EntityInfo">
            <summary> All info for the entity on the server </summary>
        </member>
        <member name="M:Breeze.Persistence.EntityInfo.#ctor">
            <summary> Only created by PersistenceManager </summary>
        </member>
        <member name="P:Breeze.Persistence.EntityInfo.PersistenceManager">
            <summary> PersistenceManager hosting this entity </summary>
        </member>
        <member name="P:Breeze.Persistence.EntityInfo.Entity">
            <summary> Entity instance </summary>
        </member>
        <member name="P:Breeze.Persistence.EntityInfo.EntityState">
            <summary> State of the entity; changes during save </summary>
        </member>
        <member name="P:Breeze.Persistence.EntityInfo.OriginalValuesMap">
            <summary> Original values of any changed properties (provided by client - not trustworthy) </summary>
        </member>
        <member name="P:Breeze.Persistence.EntityInfo.ForceUpdate">
            <summary> Not used  </summary>
        </member>
        <member name="P:Breeze.Persistence.EntityInfo.AutoGeneratedKey">
            <summary> AutoGeneratedKey (if any) associated with this entity </summary>
        </member>
        <member name="P:Breeze.Persistence.EntityInfo.UnmappedValuesMap">
            <summary> Properties passed from the client that cannot be mapped to server-side entity class </summary>
        </member>
        <member name="T:Breeze.Persistence.AutoGeneratedKeyType">
            <summary> Types of key generation for new entities </summary>
        </member>
        <member name="F:Breeze.Persistence.AutoGeneratedKeyType.None">
            <summary> No server-generated key (keys are created on the client, e.g. using GUIDs) </summary>
        </member>
        <member name="F:Breeze.Persistence.AutoGeneratedKeyType.Identity">
            <summary> Keys generated in the database, e.g. using SQL Server IDENTITY column </summary>
        </member>
        <member name="F:Breeze.Persistence.AutoGeneratedKeyType.KeyGenerator">
            <summary> Keys generated on the server using a key-generation algorithm </summary>
        </member>
        <member name="T:Breeze.Persistence.AutoGeneratedKey">
            <summary> Server-generated keys for new entities </summary>
        </member>
        <member name="M:Breeze.Persistence.AutoGeneratedKey.#ctor(System.Object,System.Object)">
            <summary> Create using information from the EntityAspect sent from the client. </summary>
        </member>
        <member name="F:Breeze.Persistence.AutoGeneratedKey.Entity">
            <summary> Entity to which this key applies </summary>
        </member>
        <member name="F:Breeze.Persistence.AutoGeneratedKey.AutoGeneratedKeyType">
            <summary> Type of key generation </summary>
        </member>
        <member name="F:Breeze.Persistence.AutoGeneratedKey.PropertyName">
            <summary> Name of key property on the entity </summary>
        </member>
        <member name="P:Breeze.Persistence.AutoGeneratedKey.Property">
            <summary> PropertyInfo of key property on the entity </summary>
        </member>
        <member name="F:Breeze.Persistence.AutoGeneratedKey.TempValue">
            <summary> Temporary value of the key, from the client </summary>
        </member>
        <member name="F:Breeze.Persistence.AutoGeneratedKey.RealValue">
            <summary> Server-generated value of the key </summary>
        </member>
        <member name="T:Breeze.Persistence.SaveResult">
            <summary> Type returned to client as JSON </summary>
        </member>
        <member name="F:Breeze.Persistence.SaveResult.Entities">
            <summary> Entities affected by the save </summary>
        </member>
        <member name="F:Breeze.Persistence.SaveResult.KeyMappings">
            <summary> Map client temporary keys to server-generated keys </summary>
        </member>
        <member name="F:Breeze.Persistence.SaveResult.DeletedKeys">
            <summary> Identifies entities that were deleted on the server as part of the save </summary>
        </member>
        <member name="F:Breeze.Persistence.SaveResult.Errors">
            <summary> Errors that occurred during save </summary>
        </member>
        <member name="T:Breeze.Persistence.KeyMapping">
            <summary> For server-generated keys.  Maps temporary key (from the client) to the real key (generated on the server) </summary>
        </member>
        <member name="F:Breeze.Persistence.KeyMapping.EntityTypeName">
            <summary> Entity type (Name:#Namespace) </summary>
        </member>
        <member name="F:Breeze.Persistence.KeyMapping.TempValue">
            <summary> Temporary key value (from the client) </summary>
        </member>
        <member name="F:Breeze.Persistence.KeyMapping.RealValue">
            <summary> Real key value (generated on the server or in the database) </summary>
        </member>
        <member name="T:Breeze.Persistence.EntityKey">
            <summary> Unique identifier for an entity </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityKey.EntityTypeName">
            <summary> The C# class name (Name:#Namespace) of the entity type </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityKey.KeyValue">
            <summary> The key (id) value of the entity.  Maybe a single value or an array. </summary>
        </member>
        <member name="T:Breeze.Persistence.EntityErrorsException">
            <summary> Exception thrown during validation and save </summary>
        </member>
        <member name="M:Breeze.Persistence.EntityErrorsException.#ctor(System.Collections.Generic.IEnumerable{Breeze.Persistence.EntityError})">
            <summary> Create with a collection of EntityErrors </summary>
        </member>
        <member name="M:Breeze.Persistence.EntityErrorsException.#ctor(System.String,System.Collections.Generic.IEnumerable{Breeze.Persistence.EntityError})">
            <summary> Create with a message and collection of EntityErrors </summary>
        </member>
        <member name="P:Breeze.Persistence.EntityErrorsException.StatusCode">
            <summary> Status to be returned to the client </summary>
        </member>
        <member name="P:Breeze.Persistence.EntityErrorsException.EntityErrors">
            <summary> Errors causing the exception </summary>
        </member>
        <member name="T:Breeze.Persistence.EntityError">
            <summary> Entity-specific error (such as validation error) that occur during save. </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityError.ErrorName">
            <summary> Short name of the error </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityError.EntityTypeName">
            <summary> Entity type causing the error </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityError.KeyValues">
            <summary> Identifier (if known) for the entity causing the error </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityError.PropertyName">
            <summary> Name of property (if known) causing the error </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityError.ErrorMessage">
            <summary> Message describing the error </summary>
        </member>
        <member name="F:Breeze.Persistence.EntityError.Custom">
            <summary> Arbitrary object to pass to client </summary>
        </member>
        <member name="T:Breeze.Persistence.JsonPropertyFixupWriter">
            <summary> JsonTextWriter that alters property names coming from EF's mapping XML </summary>
        </member>
        <member name="P:Breeze.Persistence.TransactionSettings.Default">
            <summary>
            Default settings for all saves. 
            </summary>
            <remarks>
            The <b>Default</b> provides default transaction settings for all SaveChanges actions.  
            Override BreezeConfig to return a different TransactionSettings value.
            You can supply settings for a particular save with the TransactionSettings passed in the SaveChanges call. 
            </remarks>
        </member>
        <member name="M:Breeze.Persistence.TransactionSettings.#ctor">
            <summary>
            Create a TransactionSettings object using default settings.
            </summary>
            <remarks>
            Defaults the <see cref="P:Breeze.Persistence.TransactionSettings.IsolationLevel"/> to ReadCommitted, 
            the <see cref="P:Breeze.Persistence.TransactionSettings.Timeout"/> to TransactionManager.DefaultTimeout (which is usually 1 minute),
            and <see cref="P:Breeze.Persistence.TransactionSettings.TransactionType"/> to TransactionType.None (which means the other settings have no effect).  
            These settings are not Breeze requirements and can be changed using the appropriate constructor or setter.
            </remarks>
        </member>
        <member name="M:Breeze.Persistence.TransactionSettings.#ctor(System.Transactions.IsolationLevel,System.TimeSpan,Breeze.Persistence.TransactionType)">
            <summary>
            Create a TransactionSettings object with the specified settings.
            </summary>
            <remarks>
            Note that IsolationLevel and Timeout have no affect if TransactionType is None.
            </remarks>
        </member>
        <member name="P:Breeze.Persistence.TransactionSettings.TransactionType">
            <summary>
            What type of transaction to use when performing saves.
            The transaction wraps the BeforeSaveEntity/ies, SaveChangesCore, and AfterSaveEntities methods
            so all work can be commited or rolled back together.
            </summary>
        </member>
        <member name="P:Breeze.Persistence.TransactionSettings.IsolationLevel">
            <summary>
            Gets the transaction locking behavior.
            </summary>
            <remarks>
            Only applicable if <see cref="P:Breeze.Persistence.TransactionSettings.TransactionType"/> is not <code>None</code>.  The default IsolationLevel is ReadCommitted.
            </remarks>
        </member>
        <member name="P:Breeze.Persistence.TransactionSettings.IsolationLevelAs">
            <summary>
            Gets the transaction locking behavior as a System.Data.IsolationLevel.
            </summary>
            <remarks>
            Only applicable if <see cref="P:Breeze.Persistence.TransactionSettings.TransactionType"/> is not <code>None</code>.  The default IsolationLevel is ReadCommitted.
            </remarks>
        </member>
        <member name="P:Breeze.Persistence.TransactionSettings.Timeout">
            <summary>
            Gets the timeout period for the TransactionScope transaction. 
            </summary>
            <remarks>
            Only applicable if <see cref="P:Breeze.Persistence.TransactionSettings.TransactionType"/> is <code>TransactionScope</code>. 
            The default Timeout is TransactionManager.DefaultTimeout which is usually 1 minute.
            See http://stackoverflow.com/questions/6402031/transactionscope-maximumtimeout
            </remarks>
        </member>
        <member name="M:Breeze.Persistence.TransactionSettings.ToTransactionOptions">
            <summary>
            Converts the TransactionSettings to a <see cref="T:System.Transactions.TransactionOptions" /> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Breeze.Persistence.TransactionSettings.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Breeze.Persistence.TransactionSettings.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="F:Breeze.Persistence.TransactionSettings.IsolationMap">
            <summary>
            Maps the System.Transactions.IsolationLevel to System.Data.IsolationLevel
            </summary>
        </member>
        <member name="T:Breeze.Persistence.TransactionType">
            <summary><list>
             TransactionScope - Use the ambient .NET TransactionScope object.  Necessary for distributed transactions.
             DbTransaction - Use the transaction from the DbConnection.  Only works against the single connection.
             None - BeforeSaveEntity/ies, SaveChangesCore, and AfterSaveEntities are not executed in the same transaction.
            </list></summary>
        </member>
    </members>
</doc>
